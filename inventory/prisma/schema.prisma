// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // Opcional para features adicionales
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EstadoAlmacen {
  ACTIVO
  MANTENIMIENTO
  INACTIVO
}

model Proveedor {
  id                 String               @id
  nombre             String?
  Movement_Inventory Movement_Inventory[]
}

model Producto {
  id_producto            String               @id
  nombre_producto        String
  categoria              Categoria            @relation(fields: [categoria_id], references: [id])
  categoria_id           String
  descripcion            String
  sku                    String
  codigo_barras          String
  precio_unitario        Float
  peso_kg                Float
  dimensiones_cm         String
  es_fragil              Boolean
  requiere_refrigeracion Boolean
  estado                 Boolean
  AlmacenProducto        AlmacenProducto[]
  Movement_Inventory     Movement_Inventory[]
}

model Categoria {
  id          String     @id @unique @default(uuid())
  nombre      String
  descripcion String?
  Producto    Producto[]
}

model Almacen {
  id_almacen         String               @id
  nombre_almacen     String
  direccionId        String               @unique // Clave foránea para Address
  direccion          Direccion            @relation(fields: [direccionId], references: [id])
  gerente            String
  gerenteId          String? // Opcional: si quieres almacenar el ID del usuario del microservicio de usuarios
  despachador        String?
  despachadorId      String?
  capacidad_m3       Int
  capacidad_usada_m3 Int
  estado             EstadoAlmacen
  AlmacenProducto    AlmacenProducto[]
  Movement_Inventory Movement_Inventory[]
}

model Direccion {
  id        String   @id @default(uuid())
  calle     String // calle, avenida, etc.
  ciudadId  String
  ciudad    Ciudad   @relation(fields: [ciudadId], references: [id])
  latitud   Float
  longitud  Float
  almacen   Almacen? // Relación uno a uno con Almacen
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ciudad {
  id             String       @id @unique @default(uuid())
  nombre         String
  codigo_postal  String // Código postal específico de esta dirección
  departamentoId String
  departamento   Departamento @relation(fields: [departamentoId], references: [id])
  direcciones    Direccion[]

  @@unique([nombre, departamentoId])
}

model Departamento {
  id       String   @id @unique @default(uuid())
  nombre   String
  pais     String
  ciudades Ciudad[]
}

model AlmacenProducto {
  id                String    @id @default(uuid())
  id_producto       String
  id_almacen        String
  cantidad_stock    Int
  nivel_reorden     Int
  ultima_reposicion DateTime
  fecha_vencimiento DateTime?

  producto Producto @relation(fields: [id_producto], references: [id_producto], onDelete: Cascade)
  almacen  Almacen  @relation(fields: [id_almacen], references: [id_almacen])

  @@unique([id_producto, id_almacen])
}

model Movement_Inventory {
  id           String   @id @unique @default(uuid())
  id_producto  String
  id_almacen   String
  id_proveedor String?
  tipo         Boolean
  cantidad     Int
  fecha        DateTime

  proveedor Proveedor? @relation(fields: [id_proveedor], references: [id])
  producto  Producto   @relation(fields: [id_producto], references: [id_producto])
  almacen   Almacen    @relation(fields: [id_almacen], references: [id_almacen])

  @@unique([id_producto, id_almacen, id_proveedor, fecha])
}
